module vc_module (
    input wire clk,
    input wire reset,
    input wire [31:0] in_data,
    input wire in_valid,
    output wire in_ready,
    output wire [31:0] out_data,
    output wire out_valid,
    input wire out_ready,
    input wire in_head,
    input wire in_tail,
    output wire out_head,
    output wire out_tail
);

reg [31:0] vc_buffer;   // Single buffer for this VC
reg vc_valid;           // Valid signal for this VC
reg vc_head;            // Head signal for this VC
reg vc_tail;            // Tail signal for this VC

assign in_ready = !vc_valid;  // VC is ready when it's not holding a valid flit

// Store incoming flit in VC
always @(posedge clk or posedge reset) begin
    if (reset) begin
        vc_valid <= 1'b0;
    end
    else if (in_valid && in_ready) begin
        vc_buffer <= in_data;
        vc_head <= in_head;
        vc_tail <= in_tail;
        vc_valid <= 1'b1;
    end
end

// Transmit flit from VC
assign out_data = vc_buffer;
assign out_valid = vc_valid;
assign out_head = vc_head;
assign out_tail = vc_tail;

// Clear valid flag after transmission
always @(posedge clk) begin
    if (out_valid && out_ready) begin
        vc_valid <= 1'b0;
    end
end
endmodule
