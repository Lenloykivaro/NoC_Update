module vc_module (
    input clk,
    input reset,
    input in_valid,
    input [7:0] in_data,
    input head,           // Head flit signal
    input tail,           // Tail flit signal
    output reg [7:0] out_data,
    output reg valid_out,
    output reg vc_full
);
    reg [7:0] fifo [0:5]; // Buffer for 6 flits
    integer head_ptr = 0;
    integer tail_ptr = 0;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            head_ptr <= 0;
            tail_ptr <= 0;
            vc_full <= 0;
            valid_out <= 0;
        end else begin
            if (in_valid && !vc_full) begin
                fifo[tail_ptr] <= in_data; // Store incoming flit
                tail_ptr <= (tail_ptr + 1) % 6; // Circular increment
                if (tail_ptr == head_ptr) vc_full <= 1; // Buffer full condition
            end
            
            // Forward the head flit when available
            if (head_ptr != tail_ptr) begin
                out_data <= fifo[head_ptr];
                valid_out <= 1;
                head_ptr <= (head_ptr + 1) % 6; // Circular increment
                if (head_ptr == tail_ptr) vc_full <= 0; // Buffer not full anymore
            end
        end
    end
endmodule
